import os
import time
import pyfiglet
import requests
import json
import re
from colorama import Fore, Style, init

# --- KH·ªûI T·∫†O C√ÅC BI·∫æN TO√ÄN C·ª§C ---
init(autoreset=True)
SETTINGS_FILE = 'settings.json' # T√™n file ƒë·ªÉ l∆∞u c√†i ƒë·∫∑t
tong_loi = 0
phong_da_cuoc = None
tien_da_cuoc = 0
model = None

# --- C√ÅC H√ÄM TI·ªÜN √çCH, L∆ØU/T·∫¢I C√ÄI ƒê·∫∂T ---
def clear_screen(): os.system("cls" if os.name == "nt" else "clear")

def print_colored_ascii_art(text):
    colors = [Fore.RED, Fore.GREEN, Fore.YELLOW, Fore.BLUE, Fore.MAGENTA, Fore.CYAN, Fore.WHITE]
    ascii_art = pyfiglet.figlet_format(text, font="slant"); lines = ascii_art.splitlines()
    for i, line in enumerate(lines): print(colors[i % len(colors)] + line)

def save_settings(settings_data):
    """L∆∞u tr·ªØ dict c√†i ƒë·∫∑t v√†o file JSON."""
    try:
        with open(SETTINGS_FILE, 'w') as f:
            json.dump(settings_data, f, indent=4)
        print(Fore.GREEN + "‚úÖ C√†i ƒë·∫∑t ƒë√£ ƒë∆∞·ª£c l∆∞u cho l·∫ßn ch·∫°y sau.")
    except IOError as e:
        print(Fore.RED + f"‚ùå Kh√¥ng th·ªÉ l∆∞u c√†i ƒë·∫∑t: {e}")

def load_settings():
    """T·∫£i c√†i ƒë·∫∑t t·ª´ file JSON n·∫øu c√≥."""
    if os.path.exists(SETTINGS_FILE):
        try:
            with open(SETTINGS_FILE, 'r') as f:
                return json.load(f)
        except (json.JSONDecodeError, IOError):
            return None
    return None

def mask_key(key, show_first=4, show_last=4):
    """Che b·ªõt key ƒë·ªÉ hi·ªÉn th·ªã an to√†n."""
    if not isinstance(key, str) or len(key) <= show_first + show_last:
        return "********"
    return f"{key[:show_first]}...{key[-show_last:]}"

# --- LOGIC LI√äN QUAN T·ªöI GEMINI AI (Kh√¥ng ƒë·ªïi) ---
def test_gemini_connection():
    try:
        print(Fore.YELLOW + "üîÑ ƒêang x√°c th·ª±c Gemini API Key..."); model.generate_content("Ping", generation_config={"max_output_tokens": 1}); print(Fore.GREEN + "‚úÖ X√°c th·ª±c Gemini API Key th√†nh c√¥ng!")
        return True
    except Exception as e:
        print(Fore.RED + f"‚ùå L·ªñI: Gemini API Key kh√¥ng h·ª£p l·ªá. Chi ti·∫øt: {str(e)}"); return False

def get_ai_prediction(lich_su_10_van_str, thong_ke_100_van):
    if not model: return None
    prompt = f"""
    B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch d·ªØ li·ªáu cho tr√≤ ch∆°i may r·ªßi "Escape Master". Nhi·ªám v·ª• c·ªßa b·∫°n l√† k·∫øt h·ª£p d·ªØ li·ªáu d√†i h·∫°n v√† ng·∫Øn h·∫°n ƒë·ªÉ ƒë∆∞a ra d·ª± ƒëo√°n ph√≤ng an to√†n nh·∫•t.
    **1. D·ªØ li·ªáu d√†i h·∫°n (Th·ªëng k√™ 100 v√°n g·∫ßn nh·∫•t):**
    ƒê√¢y l√† s·ªë l·∫ßn m·ªói ph√≤ng c√≥ "s√°t th·ªß" trong 100 v√°n qua. S·ªë c√†ng cao, ph√≤ng c√†ng nguy hi·ªÉm.
    {json.dumps(thong_ke_100_van, indent=2, ensure_ascii=False)}
    **2. D·ªØ li·ªáu ng·∫Øn h·∫°n (L·ªãch s·ª≠ 10 v√°n g·∫ßn nh·∫•t):**
    ƒê√¢y l√† di·ªÖn bi·∫øn c·ªßa 10 v√°n g·∫ßn ƒë√¢y nh·∫•t (v√°n m·ªõi nh·∫•t ·ªü ƒë·∫ßu).
    {lich_su_10_van_str}
    **Nhi·ªám v·ª•:** Ph√¢n t√≠ch v√† t√¨m ra ph√≤ng an to√†n nh·∫•t ƒë·ªÉ c∆∞·ª£c, ∆∞u ti√™n c√°c ph√≤ng an to√†n trong d√†i h·∫°n v√† kh√¥ng xu·∫•t hi·ªán s√°t th·ªß g·∫ßn ƒë√¢y.
    Ch·ªâ tr·∫£ l·ªùi b·∫±ng m·ªôt ƒë·ªëi t∆∞·ª£ng JSON duy nh·∫•t theo ƒë·ªãnh d·∫°ng: {{"room_name": "T√™n Ph√≤ng D·ª± ƒêo√°n"}}"""
    try:
        print(Fore.CYAN + "ü§ñ ƒêang g·ª≠i d·ªØ li·ªáu t·ªïng h·ª£p ƒë·∫øn Gemini AI..."); response = model.generate_content(prompt)
        match = re.search(r"\{.*\}", response.text, re.DOTALL)
        if match:
            json_str = match.group(0); data = json.loads(json_str); predicted_room = data.get("room_name")
            print(Fore.GREEN + f"üß† Gemini AI ƒë·ªÅ xu·∫•t: '{predicted_room}'"); return predicted_room
        else:
            print(Fore.RED + "‚ùå Kh√¥ng t√¨m th·∫•y JSON trong ph·∫£n h·ªìi t·ª´ AI."); return None
    except Exception as e: print(Fore.RED + f"‚ùå L·ªói khi g·ªçi Gemini AI: {e}"); return None

# --- C√ÅC H√ÄM LOGIC GAME (Kh√¥ng ƒë·ªïi) ---
def Login():
    global so_du_ban_dau
    print("\n" + Fore.YELLOW + "üîÑ ƒêang ƒëƒÉng nh·∫≠p v√†o game...")
    try:
        response = requests.get(url_login, headers=headers); response.raise_for_status(); data = response.json()
        if data.get("code") == 200:
            user_data = data["data"]; username = user_data["username"]; so_du_ban_dau = round(user_data["cwallet"]["ctoken_contribute"])
            print(Fore.GREEN + f"‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng! Username: {username}\n   S·ªë d∆∞ ban ƒë·∫ßu: {so_du_ban_dau} BUILD")
        else: print(Fore.RED + f"‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i: {data.get('msg', 'L·ªói kh√¥ng x√°c ƒë·ªãnh')}"); exit()
    except requests.RequestException as e: print(Fore.RED + f"‚ùå L·ªói m·∫°ng khi ƒëƒÉng nh·∫≠p: {e}"); exit()

def tong_loi_lo():
    global tool_running, tong_loi
    try:
        response = requests.get(url_login, headers=headers); response.raise_for_status(); data = response.json()
        if data.get("code") == 200:
            current_balance = round(data["data"]["cwallet"]["ctoken_contribute"]); tong_loi = current_balance - so_du_ban_dau
            color = Fore.GREEN if tong_loi >= 0 else Fore.RED
            print(Fore.LIGHTWHITE_EX + f"üìà S·ªë d∆∞: {current_balance} BUILD | L·ªùi/L·ªó: {color}{tong_loi} BUILD")
            if stop_loss_enabled and ((tong_loi <= -stop_loss_amount) or (tong_loi >= take_profit_amount)):
                print(Fore.RED + "üõë ƒêI·ªÄU KI·ªÜN D·ª™NG TOOL ƒê√É ƒê·∫†T!"); tool_running = False
    except requests.RequestException: print(Fore.YELLOW + "‚ö†Ô∏è L·ªói m·∫°ng khi ki·ªÉm tra s·ªë d∆∞.")

def dat_cuoc(room_id, bet_amount):
    global phong_da_cuoc, tien_da_cuoc
    body = {"asset_type": "BUILD", "bet_amount": int(bet_amount), "room_id": room_id}
    try:
        response = requests.post(api_cuoc, headers=headers, json=body); data = response.json()
        if response.status_code == 200 and data.get("code") == 0:
            room_name = reverse_room_mapping.get(room_id, "?"); print(Fore.BLUE + f"üéØ C∆∞·ª£c {int(bet_amount)} BUILD v√†o '{room_name}'")
            phong_da_cuoc = room_id; tien_da_cuoc = int(bet_amount); return True
        else:
            print(Fore.RED + f"‚ùå L·ªói c∆∞·ª£c: {data.get('msg', 'L·ªói kh√¥ng x√°c ƒë·ªãnh')}"); phong_da_cuoc = None; return False
    except requests.RequestException as e: print(Fore.RED + f"‚ùå L·ªói m·∫°ng khi c∆∞·ª£c: {e}"); phong_da_cuoc = None; return False


# ================== MAIN SCRIPT START ==================
if __name__ == "__main__":
    clear_screen()
    print_colored_ascii_art("PHUOCAN AI v6")
    print(Fore.CYAN + "Bot c∆∞·ª£c Escape Master - Phi√™n b·∫£n c√≥ l∆∞u c√†i ƒë·∫∑t\n")

    # --- KH·ªêI LOGIC M·ªöI: T·∫¢I HO·∫∂C Y√äU C·∫¶U C√ÄI ƒê·∫∂T ---
    settings = load_settings()
    use_saved_settings = False
    if settings:
        print(Fore.GREEN + "ƒê√£ t√¨m th·∫•y c√†i ƒë·∫∑t ƒë√£ l∆∞u:")
        print(f"  - Gemini API Key: {Fore.YELLOW}{mask_key(settings.get('gemini_api_key'))}")
        print(f"  - UID:            {Fore.YELLOW}{settings.get('uid')}")
        print(f"  - Secret Key:     {Fore.YELLOW}{mask_key(settings.get('secret_key'))}")
        
        while True:
            choice = input(Fore.CYAN + "B·∫°n c√≥ mu·ªën s·ª≠ d·ª•ng c√†i ƒë·∫∑t n√†y kh√¥ng? (y/n): ").strip().lower()
            if choice in ['y', 'n']:
                use_saved_settings = (choice == 'y')
                break
            else:
                print(Fore.RED + "Vui l√≤ng ch·ªâ nh·∫≠p 'y' ho·∫∑c 'n'.")
    
    if not use_saved_settings:
        if settings:
             print("\n" + Fore.YELLOW + "Vui l√≤ng nh·∫≠p l·∫°i c√†i ƒë·∫∑t m·ªõi.")
        else:
             print(Fore.YELLOW + "Kh√¥ng t√¨m th·∫•y file c√†i ƒë·∫∑t. Vui l√≤ng nh·∫≠p l·∫ßn ƒë·∫ßu.")
        settings = {
            'gemini_api_key': input(Fore.YELLOW + "Nh·∫≠p Gemini API Key c·ªßa b·∫°n: "),
            'uid': input(Fore.YELLOW + "Nh·∫≠p UID: "),
            'user_login': input(Fore.YELLOW + "Nh·∫≠p user_login (m·∫∑c ƒë·ªãnh: login_v2): ") or "login_v2",
            'secret_key': input(Fore.YELLOW + "Nh·∫≠p secret key: ")
        }
        save_settings(settings)
    
    # G√°n c√°c bi·∫øn t·ª´ dict 'settings'
    GEMINI_API_KEY = settings['gemini_api_key']
    user_id = settings['uid']
    user_login = settings['user_login']
    user_secret_key = settings['secret_key']

    try: import google.generativeai as genai
    except ImportError: print(Fore.RED + "L·ªói: 'pip install google-generativeai'"); exit()
    genai.configure(api_key=GEMINI_API_KEY)
    model = genai.GenerativeModel('gemini-1.5-flash-latest')
    if not test_gemini_connection(): exit()

    # --- TI·∫æP T·ª§C V·ªöI C√ÅC C√ÄI ƒê·∫∂T TRONG GAME ---
    amount = int(input(Fore.YELLOW + "Nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c ban ƒë·∫ßu: "))
    print(Fore.CYAN + "\n=== C√ÄI ƒê·∫∂T STOP LOSS/TAKE PROFIT ==="); stop_loss_enabled = input(Fore.YELLOW + "B·∫≠t Stop Loss? (y/n): ").strip().lower() == 'y'
    stop_loss_amount, take_profit_amount = 0, 0
    if stop_loss_enabled: stop_loss_amount = int(input(Fore.YELLOW + "Nh·∫≠p s·ªë BUILD d·ª´ng l·ªó: ")); take_profit_amount = int(input(Fore.YELLOW + "Nh·∫≠p s·ªë BUILD d·ª´ng l·ªùi: "))
    print(Fore.CYAN + "\n=== C√ÄI ƒê·∫∂T H·ªÜ S·ªê G·∫§P C∆Ø·ª¢C ==="); custom_multiplier = input(Fore.YELLOW + "T√πy ch·ªânh h·ªá s·ªë g·∫•p? (y/n): ").strip().lower() == 'y'
    multiplier_1, multiplier_2, multiplier_3 = 1.5, 2.0, 2.5
    if custom_multiplier:
        multiplier_1 = float(input(f"{Fore.YELLOW}G·∫•p l·∫ßn 1 (m·∫∑c ƒë·ªãnh {multiplier_1}): ") or str(multiplier_1))
        multiplier_2 = float(input(f"{Fore.YELLOW}G·∫•p l·∫ßn 2 (m·∫∑c ƒë·ªãnh {multiplier_2}): ") or str(multiplier_2))
        multiplier_3 = float(input(f"{Fore.YELLOW}G·∫•p l·∫ßn 3 (m·∫∑c ƒë·ªãnh {multiplier_3}): ") or str(multiplier_3))
    
    # --- KH·ªûI T·∫†O BI·∫æN, API, HEADER V√Ä CH·∫†Y V√íNG L·∫∂P CH√çNH ---
    cuoc_ban_dau, current_bet_amount, so_du_ban_dau, tool_running = amount, amount, 0, True
    vong_choi_da_xu_ly, chuoi_thang, number_cuoc = None, 0, 1
    
    url_login = f"https://user.3games.io/user/regist?is_cwallet=1&is_mission_setting=true&version=&time={int(time.time() * 1000)}"
    api_10_van = "https://api.escapemaster.net/escape_game/recent_10_issues?asset=BUILD"
    api_100_stats = "https://api.escapemaster.net/escape_game/recent_100_issues?asset=BUILD"
    api_cuoc = "https://api.escapemaster.net/escape_game/bet"
    headers = {"user-id": user_id, "user-login": user_login, "user-secret-key": user_secret_key}
    room_mapping = {"Nh√† Kho": 1, "Ph√≤ng H·ªçp": 2, "Ph√≤ng Gi√°m ƒê·ªëc": 3, "Ph√≤ng Tr√≤ Chuy·ªán": 4, "Ph√≤ng Gi√°m S√°t": 5, "VƒÉn Ph√≤ng": 6, "Ph√≤ng T√†i V·ª•": 7, "Ph√≤ng Nh√¢n S·ª±": 8}
    reverse_room_mapping = {v: k for k, v in room_mapping.items()}

    Login()
    print(Fore.CYAN + "\n=== C√ÄI ƒê·∫∂T HO√ÄN T·∫§T ==="); print("="*50)
    
    try:
        # (Ph·∫ßn v√≤ng l·∫∑p ch√≠nh gi·ªØ nguy√™n nh∆∞ v5)
        while tool_running:
            print(f"\n{Fore.WHITE}--- Ch·ªù k·∫øt qu·∫£ v√°n m·ªõi (15 gi√¢y) ---"); time.sleep(15)
            try:
                res_10 = requests.get(api_10_van, headers=headers); res_10.raise_for_status(); data_10 = res_10.json()
                if not (data_10.get("code") == 0 and data_10.get("data")): print(Fore.RED + "‚ùå L·ªói: API 10 v√°n."); continue
                lich_su_chi_tiet = data_10["data"]
                res_100 = requests.get(api_100_stats, headers=headers); res_100.raise_for_status(); data_100 = res_100.json()
                if not (data_100.get("code") == 0 and data_100.get("data")): print(Fore.RED + "‚ùå L·ªói: API 100 v√°n."); continue
                thong_ke_thua = data_100["data"]["room_id_2_killed_times"]
            except requests.RequestException as e: print(Fore.RED + f"L·ªói m·∫°ng khi l·∫•y d·ªØ li·ªáu: {e}"); continue
            
            latest_issue = lich_su_chi_tiet[0]; vong_choi_moi = latest_issue["issue_id"]
            if vong_choi_moi == vong_choi_da_xu_ly: print(Fore.YELLOW + "Ch∆∞a c√≥ v√°n m·ªõi..."); continue
            id_ket_qua_vong_truoc = latest_issue["killed_room_id"]; ten_phong_vong_truoc = reverse_room_mapping.get(id_ket_qua_vong_truoc, "?")
            print(Fore.LIGHTCYAN_EX + f"\nV√≤ng #{vong_choi_moi} ƒë√£ k·∫øt th√∫c. S√°t th·ªß ·ªü: {ten_phong_vong_truoc}"); vong_choi_da_xu_ly = vong_choi_moi
            if phong_da_cuoc is not None:
                thang = (phong_da_cuoc != id_ket_qua_vong_truoc)
                if thang:
                    print(Fore.GREEN + f"‚úÖ TH·∫ÆNG! (+{tien_da_cuoc} BUILD)"); chuoi_thang += 1; current_bet_amount = cuoc_ban_dau; number_cuoc = 1
                else:
                    print(Fore.RED + f"‚ùå THUA! (-{tien_da_cuoc} BUILD)"); chuoi_thang = 0
                    if number_cuoc == 1: current_bet_amount *= multiplier_1; number_cuoc = 2
                    elif number_cuoc == 2: current_bet_amount *= multiplier_2; number_cuoc = 3
                    elif number_cuoc == 3: current_bet_amount *= multiplier_3; number_cuoc = 4
                    else: current_bet_amount = cuoc_ban_dau; number_cuoc = 1; print(Fore.RED + "üö´ Reset c∆∞·ª£c.")
                tong_loi_lo()
                if not tool_running: break
            
            lich_su_str = "\n".join([f"#{d['issue_id']}: {reverse_room_mapping.get(d['killed_room_id'],'N/A')}" for d in lich_su_chi_tiet])
            thong_ke_doc = {reverse_room_mapping.get(int(k), k): v for k, v in thong_ke_thua.items()}
            predicted_room_name = get_ai_prediction(lich_su_str, thong_ke_doc)
            if predicted_room_name in room_mapping: dat_cuoc(room_mapping[predicted_room_name], current_bet_amount)
            else: print(Fore.RED + "AI kh√¥ng d·ª± ƒëo√°n ƒë∆∞·ª£c. B·ªè qua."); phong_da_cuoc = None
    except KeyboardInterrupt: print(Fore.YELLOW + "\nüõë ƒê√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng.")
    finally: print(Fore.CYAN + "C·∫£m ∆°n ƒë√£ s·ª≠ d·ª•ng tool!")
