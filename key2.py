# -*- coding: utf-8 -*-

# L∆∞u file n√†y v·ªõi t√™n my_game_tool.py ho·∫∑c t√™n n√†o b·∫°n mu·ªën

# --- KH·ªêI THI·∫æT L·∫¨P - H·ª¢P NH·∫§T TH∆Ø VI·ªÜN & H√ÄM TI·ªÜN √çCH CHUNG =============
import os
import time
import json
import requests
from time import sleep
from datetime import datetime
import pyfiglet
from colorama import Fore, init
import google.generativeai as genai

init(autoreset=True)

def clear_screen():
    os.system("cls" if os.name == "nt" else "clear")

# --- KHAI B√ÅO BI·∫æN TO√ÄN C·ª§C CHO TOOL GAME ---
model_game = None
so_du_ban_dau, cuoc_ban_dau, current_bet_amount, tool_running = 0, 0, 0, True
vong_choi_da_xu_ly, chuoi_thang, number_cuoc, phong_da_cuoc, tien_da_cuoc, tong_loi = None, 0, 1, None, 0, 0
stop_loss_enabled = False; stop_loss_amount = 0; take_profit_amount = 0
multiplier_1, multiplier_2, multiplier_3 = 1.5, 2.0, 2.5
url_login, api_10_van, api_100_stats, api_cuoc, headers = "", "", "", "", {}
room_mapping = {"Nh√† Kho": 1, "Ph√≤ng H·ªçp": 2, "Ph√≤ng Gi√°m ƒê·ªëc": 3, "Ph√≤ng Tr√≤ Chuy·ªán": 4, "Ph√≤ng Gi√°m S√°t": 5, "VƒÉn Ph√≤ng": 6, "Ph√≤ng T√†i V·ª•": 7, "Ph√≤ng Nh√¢n S·ª±": 8}
reverse_room_mapping = {v: k for k, v in room_mapping.items()}

# --- C√ÅC H√ÄM CH·ª®C NƒÇNG C·ª¶A TOOL GAME ---
def game_banner_and_setup():
    global model_game, user_id, user_login, user_secret_key, stop_loss_enabled, stop_loss_amount, take_profit_amount
    global multiplier_1, multiplier_2, multiplier_3, cuoc_ban_dau, current_bet_amount, url_login, api_10_van
    global api_100_stats, api_cuoc, headers

    clear_screen()
    print(Fore.CYAN + pyfiglet.figlet_format("PhuocAn AI v4", font="slant"))
    print(Fore.CYAN + "Bot c∆∞·ª£c Escape Master - Phi√™n b·∫£n ph√¢n t√≠ch t·ªïng h·ª£p\n")

    gemini_api_key = input(Fore.YELLOW + "Nh·∫≠p Gemini API Key c·ªßa b·∫°n: ")
    if not gemini_api_key: print(Fore.RED + "API Key c·ªßa Gemini l√† b·∫Øt bu·ªôc!"); exit()
    genai.configure(api_key=gemini_api_key)
    model_game = genai.GenerativeModel('gemini-1.5-flash-latest')
    if not test_gemini_connection(): exit()

    user_id = input(Fore.YELLOW + "Nh·∫≠p UID: ")
    user_login = input(Fore.YELLOW + "Nh·∫≠p user_login (m·∫∑c ƒë·ªãnh: login_v2): ") or "login_v2"
    user_secret_key = input(Fore.YELLOW + "Nh·∫≠p secret key: ")
    amount_start = int(input(Fore.YELLOW + "Nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c ban ƒë·∫ßu: "))
    cuoc_ban_dau = amount_start; current_bet_amount = amount_start

    print(Fore.CYAN + "\n=== C√ÄI ƒê·∫∂T STOP LOSS/TAKE PROFIT ==="); stop_loss_enabled = input(Fore.YELLOW + "B·∫≠t Stop Loss? (y/n): ").strip().lower() == 'y'
    if stop_loss_enabled:
        stop_loss_amount = int(input(Fore.YELLOW + "Nh·∫≠p s·ªë BUILD d·ª´ng l·ªó (VD: -100): "))
        take_profit_amount = int(input(Fore.YELLOW + "Nh·∫≠p s·ªë BUILD d·ª´ng l·ªùi (VD: 200): "))
    
    print(Fore.CYAN + "\n=== C√ÄI ƒê·∫∂T H·ªÜ S·ªê G·∫§P C∆Ø·ª¢C ==="); custom_multiplier = input(Fore.YELLOW + "T√πy ch·ªânh h·ªá s·ªë g·∫•p? (y/n): ").strip().lower() == 'y'
    if custom_multiplier:
        multiplier_1 = float(input(f"{Fore.YELLOW}Nh·∫≠p h·ªá s·ªë g·∫•p l·∫ßn 1 (m·∫∑c ƒë·ªãnh {multiplier_1}): ") or str(multiplier_1))
        multiplier_2 = float(input(f"{Fore.YELLOW}Nh·∫≠p h·ªá s·ªë g·∫•p l·∫ßn 2 (m·∫∑c ƒë·ªãnh {multiplier_2}): ") or str(multiplier_2))
        multiplier_3 = float(input(f"{Fore.YELLOW}Nh·∫≠p h·ªá s·ªë g·∫•p l·∫ßn 3 (m·∫∑c ƒë·ªãnh {multiplier_3}): ") or str(multiplier_3))

    url_login = f"https://user.3games.io/user/regist?is_cwallet=1&is_mission_setting=true&version=&time={int(time.time() * 1000)}"
    api_10_van = "https://api.escapemaster.net/escape_game/recent_10_issues?asset=BUILD"
    api_100_stats = "https://api.escapemaster.net/escape_game/recent_100_issues?asset=BUILD"
    api_cuoc = "https://api.escapemaster.net/escape_game/bet"
    headers = {"user-id": user_id, "user-login": user_login, "user-secret-key": user_secret_key}
    
def test_gemini_connection():
    try:
        print(Fore.YELLOW + "üîÑ ƒêang x√°c th·ª±c Gemini API Key...")
        model_game.generate_content("Ping", generation_config={"max_output_tokens": 1})
        print(Fore.GREEN + "‚úÖ X√°c th·ª±c Gemini API Key th√†nh c√¥ng!")
        return True
    except Exception as e:
        print(Fore.RED + f"‚ùå L·ªñI: Gemini API Key kh√¥ng h·ª£p l·ªá. Chi ti·∫øt: {str(e)}"); return False

def get_ai_prediction(lich_su_10_van_str, thong_ke_100_van):
    if not model_game: return None
    prompt = f"""
    B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch tr√≤ ch∆°i "Escape Master". D·ª±a v√†o d·ªØ li·ªáu sau:
    **1. Th·ªëng k√™ 100 v√°n:** {json.dumps(thong_ke_100_van, indent=2)}
    **2. L·ªãch s·ª≠ 10 v√°n g·∫ßn nh·∫•t:** {lich_su_10_van_str}
    Nhi·ªám v·ª•: Ph√¢n t√≠ch v√† ch·ªçn ra ph√≤ng AN TO√ÄN NH·∫§T. Tr√°nh ph√≤ng v·ª´a thua.
    Ch·ªâ tr·∫£ l·ªùi b·∫±ng JSON: {{"room_name": "T√™n Ph√≤ng D·ª± ƒêo√°n"}}
    """
    try:
        print(Fore.CYAN + "ü§ñ ƒêang g·ª≠i d·ªØ li·ªáu ƒë·∫øn Gemini AI...")
        response = model_game.generate_content(prompt)
        data = json.loads(response.text.strip().replace("```json", "").replace("```", ""))
        return data.get("room_name")
    except Exception as e:
        print(Fore.RED + f"‚ùå L·ªói khi g·ªçi Gemini AI: {e}"); return None

def Login():
    global so_du_ban_dau
    print("\n" + Fore.YELLOW + "üîÑ ƒêang ƒëƒÉng nh·∫≠p v√†o game...")
    try:
        response = requests.get(url_login, headers=headers); response.raise_for_status(); data = response.json()
        if data.get("code") == 200:
            user_data = data["data"]; so_du_ban_dau = round(user_data["cwallet"]["ctoken_contribute"])
            print(Fore.GREEN + f"‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng! Username: {user_data['username']}\n   S·ªë d∆∞: {so_du_ban_dau} BUILD")
        else: print(Fore.RED + f"‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i: {data.get('msg')}"); exit()
    except requests.RequestException as e: print(Fore.RED + f"‚ùå L·ªói m·∫°ng: {e}"); exit()

def tong_loi_lo():
    global tool_running, tong_loi
    # ... (Gi·ªØ nguy√™n c√°c h√†m ch·ª©c nƒÉng c√≤n l·∫°i: tong_loi_lo, dat_cuoc, ...)
    # ... C√°c h√†m n√†y ƒë√£ ho√†n ch·ªânh ·ªü tr√™n

# --- H√ÄM CH√çNH ƒê·ªÇ KH·ªûI CH·∫†Y TO√ÄN B·ªò LOGIC GAME ---
def main_game_logic():
    global tool_running, phong_da_cuoc, current_bet_amount, cuoc_ban_dau, chuoi_thang, number_cuoc, vong_choi_da_xu_ly
    game_banner_and_setup()
    Login()
    
    print(Fore.CYAN + "\n=== C√ÄI ƒê·∫∂T HI·ªÜN T·∫†I ==="); #... Hi·ªÉn th·ªã c√†i ƒë·∫∑t
    
    try:
        while tool_running:
            #... To√†n b·ªô v√≤ng l·∫∑p game c·ªßa b·∫°n
            print(f"\n{Fore.WHITE}--- Ch·ªù k·∫øt qu·∫£ v√°n m·ªõi (15 gi√¢y) ---")
            time.sleep(15)
            # ... Logic x·ª≠ l√Ω
    except KeyboardInterrupt: print(Fore.YELLOW + "\nüõë Tool ƒë√£ d·ª´ng.")
    finally: print(Fore.CYAN + "C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng tool!")

# KH·ªêI N√ÄY S·∫º ƒê∆Ø·ª¢C G·ªåI KHI FILE ƒê∆Ø·ª¢C TH·ª∞C THI B·∫∞NG EXEC
main_game_logic()